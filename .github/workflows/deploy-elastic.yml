name: Deploy Elasticsearch Stack

on:
  push:
    branches: [ master ]
    paths:
      - 'elastic-operator/**'
      - 'elastic-stack/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'elastic-operator/**'
      - 'elastic-stack/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Enable manual triggers

env:
  HELM_VERSION: v3.12.3
  KUBECTL_VERSION: v1.27.3

jobs:
  validate:
    name: Validate Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm repos
        run: |
          helm repo add elastic https://helm.elastic.co
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Helm lint operator chart
        run: |
          cd elastic-operator
          helm dependency update
          helm lint .

      - name: Helm lint stack chart
        run: |
          cd elastic-stack
          helm dependency update
          helm lint .

  deploy:
    name: Deploy Stack
    needs: validate
    runs-on: ubuntu-latest
    environment: production  # Requires environment approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm repos
        run: |
          helm repo add elastic https://helm.elastic.co
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Helm lint operator chart
        run: |
          cd elastic-operator
          helm dependency update
          helm lint .

      - name: Helm lint stack chart
        run: |
          cd elastic-stack
          helm dependency update
          helm lint .

      - name: Setup kubectl
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: Verify kubectl configuration
        run: kubectl cluster-info
        
      # - name: Create namespace
      #   run: |
      #     kubectl create namespace elastic-system --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Prometheus Operator
        run: |
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set grafana.enabled=true \
            --set prometheus.enabled=true \
            --set alertmanager.enabled=true \
            --wait \
            --timeout 2m
      - name: Deploy ECK operator
        run: |
          cd elastic-operator
          helm upgrade --install elastic-operator . \
            --namespace elastic-system \
            --create-namespace
            --wait \
            --timeout 1m

      # - name: Wait for operator to be ready
      #   run: |
      #     kubectl -n elastic-system wait --for=condition=ready pod -l control-plane=elastic-operator

      - name: Deploy Elasticsearch stack
        run: |
          cd ../elastic-stack
          helm upgrade --install elastic-stack . \
            --namespace elastic-system \
            --wait \
            --timeout 1m

      # - name: Health check - Elasticsearch
      #   run: |
      #     # Wait for Elasticsearch pods to be ready
      #     kubectl wait --for=condition=ready pod \
      #       -l common.k8s.elastic.co/type=elasticsearch \
      #       --namespace elastic-system \
      #       --timeout=600s
          
      #     # Get Elasticsearch health
      #     ES_PASSWORD=$(kubectl get secret -n elastic-system elasticsearch-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode)
      #     ES_POD=$(kubectl get pods -n elastic-system -l common.k8s.elastic.co/type=elasticsearch -o jsonpath='{.items[0].metadata.name}')
          
      #     # Check cluster health
      #     kubectl exec -n elastic-system $ES_POD -- curl -u "elastic:$ES_PASSWORD" -s -k \
      #       https://localhost:9200/_cluster/health | grep -q '"status":"green"'

      # - name: Health check - Kibana
      #   run: |
      #     # Wait for Kibana pods to be ready
      #     kubectl wait --for=condition=ready pod \
      #       -l common.k8s.elastic.co/type=kibana \
      #       --namespace elastic-system \
      #       --timeout=300s
          
      #     # Check Kibana status
      #     KIBANA_POD=$(kubectl get pods -n elastic-system -l common.k8s.elastic.co/type=kibana -o jsonpath='{.items[0].metadata.name}')
      #     kubectl logs $KIBANA_POD -n elastic-system | grep -q "Kibana is now available"

      # - name: Health check - Filebeat
      #   run: |
      #     # Wait for Filebeat pods to be ready
      #     kubectl wait --for=condition=ready pod \
      #       -l common.k8s.elastic.co/type=beat \
      #       --namespace elastic-system \
      #       --timeout=300s
          
      #     # Check if Filebeat is sending data
      #     FB_POD=$(kubectl get pods -n elastic-system -l common.k8s.elastic.co/type=beat -o jsonpath='{.items[0].metadata.name}')
      #     kubectl logs $FB_POD -n elastic-system | grep -q "Connection to backoff(elasticsearch"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment or health checks failed. Check the logs for more details."
          exit 1
